version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cleanair_route
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cleanair_route"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 캐시
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 데이터 수집 서비스
  data-ingestion:
    build: ./backend/services/data-ingestion
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/cleanair_route
      - REDIS_URL=redis://redis:6379
      - AIRKOREA_API_KEY=${AIRKOREA_API_KEY}
      - KMA_API_KEY=${KMA_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # AI 예측 서비스
  ai-prediction:
    build: ./backend/services/ai-prediction
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/cleanair_route
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models/model.pkl
      - SCALER_PATH=/app/models/scaler.pkl
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai-models/models:/app/models
    restart: unless-stopped

  # 경로 로직 서비스
  route-logic:
    build: ./backend/services/route-logic
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/cleanair_route
      - REDIS_URL=redis://redis:6379
      - AI_PREDICTION_URL=http://ai-prediction:8002
      - DATA_INGESTION_URL=http://data-ingestion:8001
      - KAKAO_MAP_KEY=${KAKAO_MAP_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-ingestion:
        condition: service_started
      ai-prediction:
        condition: service_started
    restart: unless-stopped

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - data-ingestion
      - ai-prediction
      - route-logic
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
